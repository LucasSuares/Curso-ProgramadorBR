// Aula sobre o window - trata-se de um dos objetos mais importantes do javascript
// utilizado atrav√©s das propriedades "console", "alert"... m√©todos etc

// ex.: window.console("Ol√°");

// √© o mesmo que:

// console.log("Ol√°");

// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE DOCUMENT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// Document √© uma das principais propriedades do window

// a propriedade document do objeto window √© uma das formas de acessar o arquivo html

// cada tag do html pode ser transformada em um objeto no javascript

// acesssando o body com o document Ex.:

// document.body.innerHTML = "<h2>Esse t√≠tulo foi inserido utilizando o JS</h2>"

// posso acessar o head e o body diretamento com o document

// ##### Por√©m, para acessar outros elementos do arquivo html devo utilizar a seguinte forma:

// document.getElementById - para acessar um elemento pela Id

// document.getElementsByClassName - para acessar um elemento pela Classe

// document.getElementsByTagName - Para acessar um documento pelo nome da tag

// ##### Posso modificar elemento HTML das seguintes formas:


let p = document.getElementById("p1");

p.innerHTML = '<h2>Agora o par√°grafo √© um h2, conforme altera√ß√£o com JS </h2>'

// o innerHTML insere um elemento html conforme o exemplo acima, diferente do innerText e textContent

// o innerText ir√° mostrar somente o que est√° visiv√©l no navegador por exemplo

// J√° o textContent ir√° mostrar tudo quanto √© texto que estiver no HTML, inclusive elementos com "display: none"

p.className = ""

// com a altera√ß√£o acima, eu modifiquei a classe do p1, que era "paragrafo", passou a ser nada "", o que fez retirar
// o estilo que tinha sido atribuido

// posso acessar um atributo tbm com o getAttribute("")

// posso alterar o atributo que j√° existe com o setAttribute("nomeDoAtt", "valorDoAtt"), bem como inserir um novo atributo

p.style.color = "#ffffff99"

// posso alterar o estilo tbm, como no exemplo acima

// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE DOM - EVENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// aula sobre eventos:

// posso utilizar como "atributo" nas tags html

// exemplos: onclick=""; onchange=""; onload="";

// posso escrever o c√≥digo javascript diretamente no evento ou chamar uma func√£o, por exemplo

// EX: onload √© um evento em que alguma coisa ir√° acontecer somente ap√≥s a p√°gina estiver completamente carregada

// outros exemplos:

// onmouseout=""  onmouseover=""

// addEventListener("mouseOver" "click"..., elemento) √© outra forma de adicionar evento

function h3Click() {
    console.log("teste");
    console.log(this);
}

function teste02 (e){
    console.log ("teste 2");
    console.log(this);
    console.log(e);
    console.log(e.target);

}

let h3 = document.getElementsByTagName("h3")[0];

h3.addEventListener("click", teste02);


// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE ELEMENTO PAI E FILHO >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// Posso pegar o elemento filho com a fun√ß√£o ".children", que ir√° retornar uma array dos elementos filhos

// e posso pegar o elemento pai com a fun√ß√£o ".parentElement" para pegar a taq pai



// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE BIBLIOTECA MATH >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

let pi = Math.PI.toFixed(2);

console.log(pi);



// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE JSON >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// JSON √© uma representa√ß√£o de um objeto - Javascript Object Notation

// com a fun√ß√£o ".stringify()", tranformo um objeto em uma string

// com a fun√ß√£o ".parse()", tranformo uma string em um objeto

let a = {
    nome: "Jos√©",
    nota: 9.5
}

let b = JSON.stringify(a);

console.log(a);
console.log(b);

let a2 = '{"nome": "Lucas", "nota": 8}'
//  OBS: parao JSON.parse() funcionar com a vari√°vel a2 √© necess√°rio seguir a regra acima, com as aspas
// simples por fora e aspas duplas por dentro

let b2 = JSON.parse(a2);

console.log(a2);
console.log(b2);


// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE LOCAL STORAGE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// localStorage.setItem("nome", "lucas"); - insere um valor na mem√≥ria do navegador -
// Passo uma chave do tipo string (nome) e um valor do tipo string (lucas)

// localStorage.getItem("nome"); - Busca o valor guardado na mem√≥ria - Nesse caso passo somente a chave (nome)

// localStorage.removeItem("nome"); - remove o valor // // // // //

// EXEMPLO DE PERSIST√äNCIA DE DADOS üî∞

// a fun√ß√£o abaixo recebe como parametro "e" (elemento) em refer√™ncia ao "this" que foi declarado como parametro
// na fun√ß√£o do evento "oninput" na tag "input", com intuito de obter o "valor digitado",  bem como
// salvando o que foi digitado na mem√≥ria do navegador
function atualizar(e){
    let h2 = document.getElementById("nome");
    h2.innerHTML = e.value;

    localStorage.setItem("nome", e.value);
}

// na fun√ß√£o abaixo toda vez que eu atualizo a p√°gina(a pag for carragada) permanece no h2 o que foi digitado anteriormente
onload = function(){
    let nome = localStorage.getItem("nome");
    let h2 = document.getElementById("nome");
    h2.innerHTML = nome;
}

// H√° tamb√©m o 'localStorage.clear()' - o m√©todo clear ir√° apagar tudo que estiver na mem√≥ria do navegador

// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< AULA SOBRE TIMER/INTERVALO >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// setTimeout(Fun√ß√£o(Geralmente), 30000(e o tempo de delay em milisegundos)) √© uma fun√ß√£o do window que recebe dois argumentos.

// EXEMPLO**fun√ß√£o - argumento 1;  üîº 30000 - argumento 2  üîº

// a fun√ß√£o para "fazer algo", e o tempo em que ser√° executado...

// setInterval() √© uma fun√ß√£o que diferente da anterior, ela ir√° executar  o primeiro parametro no intervalo de tempo do
// segundo parametro, continuamente...

// clearInterval() - para parar o intervalo  üî∞

var numContagem = 0;
var timer;

function atualizarTexto(){
    let h4 = document.getElementById("title4");
    h4.innerHTML += " " + numContagem;
    numContagem++;
}

function iniciar(){

   timer = setInterval(atualizarTexto, 1000);
}

function parar(){

    clearInterval(timer);
}

// Foi necess√°rio declarar a vari√°vel "timer" para utilizar como par√¢metro da fun√ß√£o clearInterval()

function zerar(){
    
}